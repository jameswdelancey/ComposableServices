# File management create - Runs import/create operations for file management and CRUD thereof


## Run import/create operations for file management and CRUD thereof.

### Cat the flat file TSV database
# {"f_short_file_name": "template.hy", "f_file_name_extension": "hy",
# "f_created": "2017-08-13 07:05:34", "f_accessed": "2024-07-13 07:17:25",
# "f_modified": "2024-07-13 07:17:25", "f_is_deleted": 0, "b_size": 15541,
# "b_is_deleted": 0, "b_record_error_code": 0,
# "d_legacy_path": "C:/Users/Administrator/Desktop/py2hy-master/py2hy-master/tools",
# "d_is_deleted": 0, "d_record_error_code": 0}
# Needs base path. Can be used for import or for linting the file_storage file repo
# Does not copy. Only starts partial jsonl records.
python
fileslurp.py
E:/new_file_storage/data/part*

### Finish fleshing jsonl file records, including deduplication
# python matchfiledirblob.py <clobber|forced-new-records> <s1_local_path> <s2_local_path>",
python
matchfiledirblob.py
forced-new-records
F:/file_storage
E:/filemanager/file_storage

### Fix the file path for storage_location 1
# Copies bs1 to bs2, metadata pass through, only log signal on failure with jsonl passthrough
# Checks for: if exists and needs_copy
# python copy1to2.py <yes_origin_to_s1|no_origin_to_s1> plus no s1
python
copy1to2.py
yes_origin_to_s1

### Check bs_1 to see if it exists on disk, and updated bs1_sha256_error with = "1" if not and "0" if it does exist
python
exists.py

### If bs1_sha256_error is 0, do the SHA256 calc on the file and ungzip it and do it there too if it is a gzip. All others mark bs1_sha256_error = "2"
python
chks1.py

# ### Run Par2, if base file is there, if par is not there we create, if it is we validate, 0 for success on either, 1 for failure on either, 2 on failure w python
# python
# chks2.py

### Clean up stdout trash from libpar2. A better fix would be re-compile with proper stderr usage.
python
jsonlonly.py

### Save the result in the tmp directory
python
split3.py
